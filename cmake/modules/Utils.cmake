# Copyright (c) Qinware Technologies Co., Ltd. 2025. All rights reserved.
# Copyright (c) 2017 - 2025 CHINBOY <qinware@163.com>
# This source file is part of the cskia project
# See https://qinware.com/LICENSE.txt for license information
#
# Created by CHINBOY on 2025/08/03.

function(cskia_is_directory_empty dir result_var)
    file(GLOB files "${dir}/*")
    # 过滤掉 "." 和 ".." 目录
    list(FILTER files EXCLUDE REGEX "/\\.$")
    list(FILTER files EXCLUDE REGEX "/\\.\\.$")
    list(FILTER hidden_files EXCLUDE REGEX "/\\.$")
    list(FILTER hidden_files EXCLUDE REGEX "/\\.\\.$")

    list(APPEND files ${hidden_files})

    list(LENGTH files count)
    if(count EQUAL 0)
        set(${result_var} TRUE PARENT_SCOPE)
    else()
        set(${result_var} FALSE PARENT_SCOPE)
    endif()
endfunction()

function(cskia_append_flag value)
    foreach(variable ${ARGN})
        set(${variable} "${${variable}} ${value}" PARENT_SCOPE)
    endforeach(variable)
endfunction()

function(cskia_append_flag_if condition value)
    if(${condition})
        foreach(variable ${ARGN})
            set(${variable} "${${variable}} ${value}" PARENT_SCOPE)
        endforeach(variable)
    endif()
endfunction()

macro(cskia_add_flag_if_supported flag name)
    check_c_compiler_flag("-Werror ${flag}" "C_SUPPORTS_${name}")
    cskia_append_flag_if("C_SUPPORTS_${name}" "${flag}" CMAKE_C_FLAGS)
    check_cxx_compiler_flag("-Werror ${flag}" "CXX_SUPPORTS_${name}")
    cskia_append_flag_if("CXX_SUPPORTS_${name}" "${flag}" CMAKE_CXX_FLAGS)
endmacro()

function(cskia_add_flag_or_print_warning flag name)
    check_c_compiler_flag("-Werror ${flag}" "C_SUPPORTS_${name}")
    check_cxx_compiler_flag("-Werror ${flag}" "CXX_SUPPORTS_${name}")
    if(C_SUPPORTS_${name} AND CXX_SUPPORTS_${name})
        message(STATUS "Building with ${flag}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flag}" PARENT_SCOPE)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${flag}" PARENT_SCOPE)
        set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} ${flag}" PARENT_SCOPE)
    else()
        message(WARNING "${flag} is not supported.")
    endif()
endfunction()

function(cskia_set_if_target var target)
    if(TARGET "${target}")
        set(_result ON)
    else()
        set(_result OFF)
    endif()
    set(${var} "${_result}" PARENT_SCOPE)
endfunction()

# Set each output directory according to ${CMAKE_CONFIGURATION_TYPES}.
# Note: Don't set variables CMAKE_*_OUTPUT_DIRECTORY any more,
# or a certain builder, for eaxample, msbuild.exe, would be confused.
function(cskia_set_output_directory target)
    cmake_parse_arguments(ARG "" "BINARY_DIR;LIBRARY_DIR" "" ${ARGN})

    # module_dir -- corresponding to LIBRARY_OUTPUT_DIRECTORY.
    # It affects output of add_library(MODULE).
    if(WIN32 OR CYGWIN)
        # DLL platform
        set(module_dir ${ARG_BINARY_DIR})
    else()
        set(module_dir ${ARG_LIBRARY_DIR})
    endif()
    if(NOT "${CMAKE_CFG_INTDIR}" STREQUAL ".")
        foreach(build_mode ${CMAKE_CONFIGURATION_TYPES})
            string(TOUPPER "${build_mode}" CONFIG_SUFFIX)
            if(ARG_BINARY_DIR)
                string(REPLACE ${CMAKE_CFG_INTDIR} ${build_mode} bi ${ARG_BINARY_DIR})
                set_target_properties(${target} PROPERTIES "RUNTIME_OUTPUT_DIRECTORY_${CONFIG_SUFFIX}" ${bi})
            endif()
            if(ARG_LIBRARY_DIR)
                string(REPLACE ${CMAKE_CFG_INTDIR} ${build_mode} li ${ARG_LIBRARY_DIR})
                set_target_properties(${target} PROPERTIES "ARCHIVE_OUTPUT_DIRECTORY_${CONFIG_SUFFIX}" ${li})
            endif()
            if(module_dir)
                string(REPLACE ${CMAKE_CFG_INTDIR} ${build_mode} mi ${module_dir})
                set_target_properties(${target} PROPERTIES "LIBRARY_OUTPUT_DIRECTORY_${CONFIG_SUFFIX}" ${mi})
            endif()
        endforeach()
    else()
        if(ARG_BINARY_DIR)
            set_target_properties(${target} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${ARG_BINARY_DIR})
        endif()
        if(ARG_LIBRARY_DIR)
            set_target_properties(${target} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${ARG_LIBRARY_DIR})
        endif()
        if(module_dir)
            set_target_properties(${target} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${module_dir})
        endif()
    endif()
endfunction()

macro(cskia_check_library_exists library function location variable)
    check_library_exists("${library}" "${function}" "${location}" "${variable}")
    if(${${variable}})
        set(CSKIA_${variable} ON)
    endif()
endmacro()

macro(cskia_check_symbol_exists symbol files variable)
    check_symbol_exists("${symbol}" "${files}" "${variable}")
    if(${${variable}})
        set(CSKIA_${variable} ON)
    endif()
endmacro()

macro(cskia_add_definitions)
    foreach(arg ${ARGN})
        if(DEFINED CSKIA_DEFINITIONS)
            set(CSKIA_DEFINITIONS "${CSKIA_DEFINITIONS} ${arg}")
        else()
            set(CSKIA_DEFINITIONS ${arg})
        endif()
    endforeach(arg)
    add_definitions(${ARGN})
endmacro()

macro(cskia_check_headers)
    foreach(_filename ${ARGV})
        cskia_generate_header_guard(${_filename} _guardName)
        check_include_file(${_filename} ${_guardName})
        if(${${_guardName}})
            set(CSKIA_${_guardName} ON)
        endif()
    endforeach()
endmacro()

macro(cskia_check_funcs)
    foreach(_func ${ARGV})
        string(TOUPPER ${_func} upcase)
        check_function_exists(${_func} HAVE_${upcase})
        if(${HAVE_${upcase}})
            set(CSKIA_HAVE_${upcase} ON)
        endif()
    endforeach()
endmacro()

function(cskia_define_have name)
    cskia_generate_header_guard(${name} haveName)
    set(${haveName} ON PARENT_SCOPE)
endfunction()

function(cskia_generate_header_guard filename output)
    string(TOUPPER ${filename} filename)
    string(REPLACE "." "_" filename ${filename})
    string(REPLACE "/" "_" filename ${filename})
    set(${output} HAVE_${filename} PARENT_SCOPE)
endfunction()

function(cskia_add_files target)
    list(REMOVE_AT ARGV 0)
    foreach(file ${ARGV})
        list(APPEND ${target} ${CMAKE_CURRENT_SOURCE_DIR}/${file})
    endforeach()
    set(${target} ${${target}} PARENT_SCOPE)
endfunction()

macro(cskia_merge_list target list)
    foreach(_listItem ${${list}})
        list(APPEND ${target} ${_listItem})
    endforeach()
    if(target)
        list(REMOVE_DUPLICATES ${target})
    endif()
endmacro()

function(cskia_list_replace input_list old new)
    set(replaced_list)
    foreach(item ${${input_list}})
        if(${item} STREQUAL ${old})
            list(APPEND replaced_list ${new})
        else()
            list(APPEND replaced_list ${item})
        endif()
    endforeach()
    set("${input_list}" "${replaced_list}" PARENT_SCOPE)
endfunction()

function(cskia_list_subtract lhs rhs result_var_name)
    set(result)
    foreach(item IN LISTS lhs)
        if(NOT "${item}" IN_LIST rhs)
            list(APPEND result "${item}")
        endif()
    endforeach()
    set("${result_var_name}" "${result}" PARENT_SCOPE)
endfunction()

function(cskia_list_intersect lhs rhs result_var_name)
    set(result)
    foreach(item IN LISTS lhs)
        if("${item}" IN_LIST rhs)
            list(APPEND result "${item}")
        endif()
    endforeach()
    set("${result_var_name}" "${result}" PARENT_SCOPE)
endfunction()

function(cskia_list_union lhs rhs result_var_name)
    set(result)
    foreach(item IN LISTS lhs rhs)
        if(NOT "${item}" IN_LIST result)
            list(APPEND result "${item}")
        endif()
    endforeach()
    set("${result_var_name}" "${result}" PARENT_SCOPE)
endfunction()

function(cskia_condition_info varName condition)
    if(NOT ${condition})
        set(${varName} "" PARENT_SCOPE)
    else()
        string(REPLACE ";" " " _contents "${${condition}}")
        set(${varName} "with CONDITION ${_contents}" PARENT_SCOPE)
    endif()
endfunction()

function(cskia_update_cached_list name value)
    set(_tmp_list "${${name}}")
    list(APPEND _tmp_list "${value}")
    set("${name}" "${_tmp_list}" CACHE INTERNAL "*** Internal ***")
endfunction()

function(cskia_set_public_headers target sources)
    foreach(source IN LISTS sources)
        if(source MATCHES "\.h$|\.hpp$")
            cskia_add_public_header(${source})
        endif()
    endforeach()
endfunction()

function(cskia_add_public_header header)
    if(NOT IS_ABSOLUTE ${header})
        set(header "${CMAKE_CURRENT_SOURCE_DIR}/${header}")
    endif()

    cskia_source_dir(cskia_source_dir)
    get_filename_component(source_dir ${header} DIRECTORY)
    file(RELATIVE_PATH include_dir_relative_path "${cskia_source_dir}" "${source_dir}")

    install(
        FILES ${header}
        DESTINATION "${CSKIA_HEADER_INSTALL_PATH}/${include_dir_relative_path}"
        COMPONENT Devel EXCLUDE_FROM_ALL
    )
endfunction()

function(cskia_source_dir varName)
    if(CSKIA_MERGE_BINARY_DIR)
        set(${varName} ${CSKIA_SOURCE_DIR} PARENT_SCOPE)
    else()
        set(${varName} ${PROJECT_SOURCE_DIR} PARENT_SCOPE)
    endif()
endfunction()

function(cskia_set_public_includes target includes)
    foreach(inc_dir IN LISTS includes)
        if(NOT IS_ABSOLUTE ${inc_dir})
            set(inc_dir "${CMAKE_CURRENT_SOURCE_DIR}/${inc_dir}")
        endif()
        file(RELATIVE_PATH include_dir_relative_path ${PROJECT_SOURCE_DIR} ${inc_dir})
        target_include_directories(${target} PUBLIC
            $<BUILD_INTERFACE:${inc_dir}>
            $<INSTALL_INTERFACE:${CSKIA_HEADER_INSTALL_PATH}/${include_dir_relative_path}>
        )
    endforeach()
endfunction()

function(cskia_add_depends target_name)
    cmake_parse_arguments(_arg "" "" "PRIVATE;PUBLIC" ${ARGN})
    if(${_arg_UNPARSED_ARGUMENTS})
        message(FATAL_ERROR "cskia_add_depends had unparsed arguments")
    endif()

    cskia_check_disabled_targets(${target_name} _arg_PRIVATE)
    cskia_check_disabled_targets(${target_name} _arg_PUBLIC)

    set(depends "${_arg_PRIVATE}")
    set(public_depends "${_arg_PUBLIC}")

    get_target_property(target_type ${target_name} TYPE)
    if(NOT target_type STREQUAL "OBJECT_LIBRARY")
        target_link_libraries(${target_name} PRIVATE ${depends} PUBLIC ${public_depends})
    else()
        list(APPEND object_lib_depends ${depends})
        list(APPEND object_public_depends ${public_depends})
    endif()

    foreach(obj_lib IN LISTS object_lib_depends)
        target_compile_options(${target_name} PRIVATE $<TARGET_PROPERTY:${obj_lib},INTERFACE_COMPILE_OPTIONS>)
        target_compile_definitions(${target_name} PRIVATE $<TARGET_PROPERTY:${obj_lib},INTERFACE_COMPILE_DEFINITIONS>)
        target_include_directories(${target_name} PRIVATE $<TARGET_PROPERTY:${obj_lib},INTERFACE_INCLUDE_DIRECTORIES>)
    endforeach()
    foreach(obj_lib IN LISTS object_public_depends)
        target_compile_options(${target_name} PUBLIC $<TARGET_PROPERTY:${obj_lib},INTERFACE_COMPILE_OPTIONS>)
        target_compile_definitions(${target_name} PUBLIC $<TARGET_PROPERTY:${obj_lib},INTERFACE_COMPILE_DEFINITIONS>)
        target_include_directories(${target_name} PUBLIC $<TARGET_PROPERTY:${obj_lib},INTERFACE_INCLUDE_DIRECTORIES>)
    endforeach()
endfunction()

function(cskia_check_disabled_targets target_name dependent_targets)
    foreach(dependency IN LISTS ${dependent_targets})
        foreach(type PLUGIN LIBRARY)
            string(TOUPPER "BUILD_${type}_${dependency}" build_target)
            if(DEFINED ${build_target} AND NOT ${build_target})
                message(SEND_ERROR "Target ${name} depends on ${dependency} which was disabled via ${build_target} set to ${${build_target}}")
            endif()
        endforeach()
    endforeach()
endfunction()

function(cskia_enable_sanitize _sanitize_flags)
    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=${_sanitize_flags}")
    endif()
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}" PARENT_SCOPE)
endfunction()
